# HG changeset patch
# User msirringhaus@suse.de
# Date 1582805876 -3600
#      Thu Feb 27 13:17:56 2020 +0100
# Node ID e6e3893f4646f71ee0526dd4da6a1cf0b7a7b512
# Parent  cd989771909df4db5309eb867a5e990ed9712581
imported patch decoder_workaround.patch

diff -r cd989771909d image/decoders/nsGIFDecoder2.cpp
--- a/image/decoders/nsGIFDecoder2.cpp	Thu Feb 27 12:57:14 2020 +0100
+++ b/image/decoders/nsGIFDecoder2.cpp	Wed Apr 15 15:16:16 2020 +0200
@@ -421,6 +421,9 @@
   MOZ_ASSERT(mSwizzleFn);
   uint8_t* data = reinterpret_cast<uint8_t*>(aColormap);
   mSwizzleFn(data, data, aColors);
+#if MOZ_BIG_ENDIAN()
+  SwizzleRow(SurfaceFormat::A8R8G8B8, SurfaceFormat::B8G8R8A8)(data, data, aColors);
+#endif
 }
 
 LexerResult nsGIFDecoder2::DoDecode(SourceBufferIterator& aIterator,
diff -r cd989771909d image/decoders/nsJPEGDecoder.cpp
--- a/image/decoders/nsJPEGDecoder.cpp	Thu Feb 27 12:57:14 2020 +0100
+++ b/image/decoders/nsJPEGDecoder.cpp	Wed Apr 15 15:16:16 2020 +0200
@@ -256,6 +256,9 @@
         case JCS_YCbCr:
           // By default, we will output directly to BGRA. If we need to apply
           // special color transforms, this may change.
+#if MOZ_BIG_ENDIAN()
+          mInfo.out_color_space = MOZ_JCS_EXT_NATIVE_ENDIAN_XRGB;
+#else
           switch (SurfaceFormat::OS_RGBX) {
             case SurfaceFormat::B8G8R8X8:
               mInfo.out_color_space = JCS_EXT_BGRX;
@@ -270,6 +273,7 @@
               mState = JPEG_ERROR;
               return Transition::TerminateFailure();
           }
+#endif
           break;
         case JCS_CMYK:
         case JCS_YCCK:
diff -r cd989771909d image/decoders/nsPNGDecoder.cpp
--- a/image/decoders/nsPNGDecoder.cpp	Thu Feb 27 12:57:14 2020 +0100
+++ b/image/decoders/nsPNGDecoder.cpp	Wed Apr 15 15:16:16 2020 +0200
@@ -356,7 +356,7 @@
                                    IResumable* aOnResume) {
   MOZ_ASSERT(!HasError(), "Shouldn't call DoDecode after error!");
 
-  return mLexer.Lex(aIterator, aOnResume,
+  LexerResult res = mLexer.Lex(aIterator, aOnResume,
                     [=](State aState, const char* aData, size_t aLength) {
                       switch (aState) {
                         case State::PNG_DATA:
@@ -366,6 +366,14 @@
                       }
                       MOZ_CRASH("Unknown State");
                     });
+
+#if MOZ_BIG_ENDIAN()
+  if(res.is<TerminalState>() && res.as<TerminalState>() == TerminalState::SUCCESS) {
+      NativeEndian::swapToLittleEndianInPlace<uint32_t>((uint32_t*)(mImageData), mImageDataLength / 4);
+  }
+#endif
+
+  return res;
 }
 
 LexerTransition<nsPNGDecoder::State> nsPNGDecoder::ReadPNGData(
diff -r cd989771909d image/decoders/nsWebPDecoder.cpp
--- a/image/decoders/nsWebPDecoder.cpp	Thu Feb 27 12:57:14 2020 +0100
+++ b/image/decoders/nsWebPDecoder.cpp	Wed Apr 15 15:16:16 2020 +0200
@@ -120,6 +120,11 @@
       continue;
     }
 
+#if MOZ_BIG_ENDIAN()
+  if(rv.is<TerminalState>() && rv.as<TerminalState>() == TerminalState::SUCCESS) {
+      NativeEndian::swapToLittleEndianInPlace<uint32_t>((uint32_t*)(mImageData), mImageDataLength / 4);
+  }
+#endif
     return rv;
   }
 }
